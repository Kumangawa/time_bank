/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TimeBank {
  export type ServiceStruct = {
    id: BigNumberish;
    provider: AddressLike;
    description: string;
    rate: BigNumberish;
    isAvailable: boolean;
    valuation: BigNumberish;
    reservedBy: AddressLike;
  };

  export type ServiceStructOutput = [
    id: bigint,
    provider: string,
    description: string,
    rate: bigint,
    isAvailable: boolean,
    valuation: bigint,
    reservedBy: string
  ] & {
    id: bigint;
    provider: string;
    description: string;
    rate: bigint;
    isAvailable: boolean;
    valuation: bigint;
    reservedBy: string;
  };

  export type ServiceRequestStruct = {
    id: BigNumberish;
    requester: AddressLike;
    description: string;
    rate: BigNumberish;
    takenBy: AddressLike;
    isFulfilled: boolean;
    valuation: BigNumberish;
  };

  export type ServiceRequestStructOutput = [
    id: bigint,
    requester: string,
    description: string,
    rate: bigint,
    takenBy: string,
    isFulfilled: boolean,
    valuation: bigint
  ] & {
    id: bigint;
    requester: string;
    description: string;
    rate: bigint;
    takenBy: string;
    isFulfilled: boolean;
    valuation: bigint;
  };

  export type TransactionStruct = {
    id: BigNumberish;
    from: AddressLike;
    to: AddressLike;
    amount: BigNumberish;
    description: string;
  };

  export type TransactionStructOutput = [
    id: bigint,
    from: string,
    to: string,
    amount: bigint,
    description: string
  ] & {
    id: bigint;
    from: string;
    to: string;
    amount: bigint;
    description: string;
  };
}

export interface TimeBankInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balances"
      | "bookService"
      | "completeOfferedService"
      | "completeRequestedService"
      | "getAllOfferedServices"
      | "getAllRequestedServices"
      | "getAllTransactions"
      | "getAllUsers"
      | "getBalance"
      | "getOfferedService"
      | "getRequestedService"
      | "getService"
      | "getServiceRequest"
      | "getTransaction"
      | "offerService"
      | "offeredServicesCount"
      | "owner"
      | "rateUser"
      | "ratings"
      | "registerUser"
      | "requestCount"
      | "requestService"
      | "requestedServicesCount"
      | "serviceCount"
      | "serviceRequests"
      | "services"
      | "takeRequest"
      | "totalSupply"
      | "transactionCount"
      | "transactions"
      | "transferTokens"
      | "users"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RequestTaken"
      | "ServiceBooked"
      | "ServiceCompleted"
      | "ServiceOffered"
      | "ServiceRequested"
      | "TokenTransferred"
      | "UserRated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bookService",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeOfferedService",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeRequestedService",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllOfferedServices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRequestedServices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferedService",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestedService",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getService",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerService",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offeredServicesCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rateUser",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ratings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestService",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestedServicesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "serviceCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "serviceRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "services",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "takeRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bookService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeOfferedService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeRequestedService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllOfferedServices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllRequestedServices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOfferedService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestedService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getService", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getServiceRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offeredServicesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rateUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ratings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestedServicesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serviceCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serviceRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "services", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
}

export namespace RequestTakenEvent {
  export type InputTuple = [requestId: BigNumberish, worker: AddressLike];
  export type OutputTuple = [requestId: bigint, worker: string];
  export interface OutputObject {
    requestId: bigint;
    worker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ServiceBookedEvent {
  export type InputTuple = [serviceId: BigNumberish, requester: AddressLike];
  export type OutputTuple = [serviceId: bigint, requester: string];
  export interface OutputObject {
    serviceId: bigint;
    requester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ServiceCompletedEvent {
  export type InputTuple = [
    serviceId: BigNumberish,
    provider: AddressLike,
    requester: AddressLike
  ];
  export type OutputTuple = [
    serviceId: bigint,
    provider: string,
    requester: string
  ];
  export interface OutputObject {
    serviceId: bigint;
    provider: string;
    requester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ServiceOfferedEvent {
  export type InputTuple = [
    serviceId: BigNumberish,
    provider: AddressLike,
    description: string,
    rate: BigNumberish
  ];
  export type OutputTuple = [
    serviceId: bigint,
    provider: string,
    description: string,
    rate: bigint
  ];
  export interface OutputObject {
    serviceId: bigint;
    provider: string;
    description: string;
    rate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ServiceRequestedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    requester: AddressLike,
    description: string
  ];
  export type OutputTuple = [
    requestId: bigint,
    requester: string,
    description: string
  ];
  export interface OutputObject {
    requestId: bigint;
    requester: string;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenTransferredEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRatedEvent {
  export type InputTuple = [user: AddressLike, rating: BigNumberish];
  export type OutputTuple = [user: string, rating: bigint];
  export interface OutputObject {
    user: string;
    rating: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TimeBank extends BaseContract {
  connect(runner?: ContractRunner | null): TimeBank;
  waitForDeployment(): Promise<this>;

  interface: TimeBankInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  bookService: TypedContractMethod<
    [serviceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  completeOfferedService: TypedContractMethod<
    [serviceId: BigNumberish, rating: BigNumberish],
    [void],
    "nonpayable"
  >;

  completeRequestedService: TypedContractMethod<
    [requestId: BigNumberish, hoursWorked: BigNumberish, rating: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllOfferedServices: TypedContractMethod<
    [],
    [TimeBank.ServiceStructOutput[]],
    "view"
  >;

  getAllRequestedServices: TypedContractMethod<
    [],
    [TimeBank.ServiceRequestStructOutput[]],
    "view"
  >;

  getAllTransactions: TypedContractMethod<
    [],
    [TimeBank.TransactionStructOutput[]],
    "view"
  >;

  getAllUsers: TypedContractMethod<[], [string[]], "view">;

  getBalance: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getOfferedService: TypedContractMethod<
    [serviceId: BigNumberish],
    [TimeBank.ServiceStructOutput],
    "view"
  >;

  getRequestedService: TypedContractMethod<
    [requestId: BigNumberish],
    [TimeBank.ServiceRequestStructOutput],
    "view"
  >;

  getService: TypedContractMethod<
    [serviceId: BigNumberish],
    [TimeBank.ServiceStructOutput],
    "view"
  >;

  getServiceRequest: TypedContractMethod<
    [requestId: BigNumberish],
    [TimeBank.ServiceRequestStructOutput],
    "view"
  >;

  getTransaction: TypedContractMethod<
    [transactionId: BigNumberish],
    [TimeBank.TransactionStructOutput],
    "view"
  >;

  offerService: TypedContractMethod<
    [description: string, rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  offeredServicesCount: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  rateUser: TypedContractMethod<
    [user: AddressLike, rating: BigNumberish],
    [void],
    "nonpayable"
  >;

  ratings: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  registerUser: TypedContractMethod<[], [void], "nonpayable">;

  requestCount: TypedContractMethod<[], [bigint], "view">;

  requestService: TypedContractMethod<
    [description: string],
    [void],
    "nonpayable"
  >;

  requestedServicesCount: TypedContractMethod<[], [bigint], "view">;

  serviceCount: TypedContractMethod<[], [bigint], "view">;

  serviceRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string, boolean, bigint] & {
        id: bigint;
        requester: string;
        description: string;
        rate: bigint;
        takenBy: string;
        isFulfilled: boolean;
        valuation: bigint;
      }
    ],
    "view"
  >;

  services: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, bigint, string] & {
        id: bigint;
        provider: string;
        description: string;
        rate: bigint;
        isAvailable: boolean;
        valuation: bigint;
        reservedBy: string;
      }
    ],
    "view"
  >;

  takeRequest: TypedContractMethod<
    [requestId: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transactionCount: TypedContractMethod<[], [bigint], "view">;

  transactions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string] & {
        id: bigint;
        from: string;
        to: string;
        amount: bigint;
        description: string;
      }
    ],
    "view"
  >;

  transferTokens: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  users: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bookService"
  ): TypedContractMethod<[serviceId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeOfferedService"
  ): TypedContractMethod<
    [serviceId: BigNumberish, rating: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "completeRequestedService"
  ): TypedContractMethod<
    [requestId: BigNumberish, hoursWorked: BigNumberish, rating: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllOfferedServices"
  ): TypedContractMethod<[], [TimeBank.ServiceStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAllRequestedServices"
  ): TypedContractMethod<[], [TimeBank.ServiceRequestStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAllTransactions"
  ): TypedContractMethod<[], [TimeBank.TransactionStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAllUsers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOfferedService"
  ): TypedContractMethod<
    [serviceId: BigNumberish],
    [TimeBank.ServiceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRequestedService"
  ): TypedContractMethod<
    [requestId: BigNumberish],
    [TimeBank.ServiceRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getService"
  ): TypedContractMethod<
    [serviceId: BigNumberish],
    [TimeBank.ServiceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getServiceRequest"
  ): TypedContractMethod<
    [requestId: BigNumberish],
    [TimeBank.ServiceRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransaction"
  ): TypedContractMethod<
    [transactionId: BigNumberish],
    [TimeBank.TransactionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "offerService"
  ): TypedContractMethod<
    [description: string, rate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "offeredServicesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rateUser"
  ): TypedContractMethod<
    [user: AddressLike, rating: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ratings"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestService"
  ): TypedContractMethod<[description: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestedServicesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "serviceCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "serviceRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string, boolean, bigint] & {
        id: bigint;
        requester: string;
        description: string;
        rate: bigint;
        takenBy: string;
        isFulfilled: boolean;
        valuation: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "services"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, bigint, string] & {
        id: bigint;
        provider: string;
        description: string;
        rate: bigint;
        isAvailable: boolean;
        valuation: bigint;
        reservedBy: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "takeRequest"
  ): TypedContractMethod<[requestId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transactionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transactions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string] & {
        id: bigint;
        from: string;
        to: string;
        amount: bigint;
        description: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferTokens"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "RequestTaken"
  ): TypedContractEvent<
    RequestTakenEvent.InputTuple,
    RequestTakenEvent.OutputTuple,
    RequestTakenEvent.OutputObject
  >;
  getEvent(
    key: "ServiceBooked"
  ): TypedContractEvent<
    ServiceBookedEvent.InputTuple,
    ServiceBookedEvent.OutputTuple,
    ServiceBookedEvent.OutputObject
  >;
  getEvent(
    key: "ServiceCompleted"
  ): TypedContractEvent<
    ServiceCompletedEvent.InputTuple,
    ServiceCompletedEvent.OutputTuple,
    ServiceCompletedEvent.OutputObject
  >;
  getEvent(
    key: "ServiceOffered"
  ): TypedContractEvent<
    ServiceOfferedEvent.InputTuple,
    ServiceOfferedEvent.OutputTuple,
    ServiceOfferedEvent.OutputObject
  >;
  getEvent(
    key: "ServiceRequested"
  ): TypedContractEvent<
    ServiceRequestedEvent.InputTuple,
    ServiceRequestedEvent.OutputTuple,
    ServiceRequestedEvent.OutputObject
  >;
  getEvent(
    key: "TokenTransferred"
  ): TypedContractEvent<
    TokenTransferredEvent.InputTuple,
    TokenTransferredEvent.OutputTuple,
    TokenTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UserRated"
  ): TypedContractEvent<
    UserRatedEvent.InputTuple,
    UserRatedEvent.OutputTuple,
    UserRatedEvent.OutputObject
  >;

  filters: {
    "RequestTaken(uint256,address)": TypedContractEvent<
      RequestTakenEvent.InputTuple,
      RequestTakenEvent.OutputTuple,
      RequestTakenEvent.OutputObject
    >;
    RequestTaken: TypedContractEvent<
      RequestTakenEvent.InputTuple,
      RequestTakenEvent.OutputTuple,
      RequestTakenEvent.OutputObject
    >;

    "ServiceBooked(uint256,address)": TypedContractEvent<
      ServiceBookedEvent.InputTuple,
      ServiceBookedEvent.OutputTuple,
      ServiceBookedEvent.OutputObject
    >;
    ServiceBooked: TypedContractEvent<
      ServiceBookedEvent.InputTuple,
      ServiceBookedEvent.OutputTuple,
      ServiceBookedEvent.OutputObject
    >;

    "ServiceCompleted(uint256,address,address)": TypedContractEvent<
      ServiceCompletedEvent.InputTuple,
      ServiceCompletedEvent.OutputTuple,
      ServiceCompletedEvent.OutputObject
    >;
    ServiceCompleted: TypedContractEvent<
      ServiceCompletedEvent.InputTuple,
      ServiceCompletedEvent.OutputTuple,
      ServiceCompletedEvent.OutputObject
    >;

    "ServiceOffered(uint256,address,string,uint256)": TypedContractEvent<
      ServiceOfferedEvent.InputTuple,
      ServiceOfferedEvent.OutputTuple,
      ServiceOfferedEvent.OutputObject
    >;
    ServiceOffered: TypedContractEvent<
      ServiceOfferedEvent.InputTuple,
      ServiceOfferedEvent.OutputTuple,
      ServiceOfferedEvent.OutputObject
    >;

    "ServiceRequested(uint256,address,string)": TypedContractEvent<
      ServiceRequestedEvent.InputTuple,
      ServiceRequestedEvent.OutputTuple,
      ServiceRequestedEvent.OutputObject
    >;
    ServiceRequested: TypedContractEvent<
      ServiceRequestedEvent.InputTuple,
      ServiceRequestedEvent.OutputTuple,
      ServiceRequestedEvent.OutputObject
    >;

    "TokenTransferred(address,address,uint256)": TypedContractEvent<
      TokenTransferredEvent.InputTuple,
      TokenTransferredEvent.OutputTuple,
      TokenTransferredEvent.OutputObject
    >;
    TokenTransferred: TypedContractEvent<
      TokenTransferredEvent.InputTuple,
      TokenTransferredEvent.OutputTuple,
      TokenTransferredEvent.OutputObject
    >;

    "UserRated(address,uint256)": TypedContractEvent<
      UserRatedEvent.InputTuple,
      UserRatedEvent.OutputTuple,
      UserRatedEvent.OutputObject
    >;
    UserRated: TypedContractEvent<
      UserRatedEvent.InputTuple,
      UserRatedEvent.OutputTuple,
      UserRatedEvent.OutputObject
    >;
  };
}
