/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PokemonCardManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cardCount"
      | "createPokemonCard"
      | "getMyCards"
      | "getPokemonCardById"
      | "levelUp"
      | "owner"
      | "transferCardOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CardLevelUp" | "CardTransfered" | "NewCardCreated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "cardCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPokemonCard",
    values: [string, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyCards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPokemonCardById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "levelUp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferCardOwnership",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "cardCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPokemonCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMyCards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPokemonCardById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levelUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferCardOwnership",
    data: BytesLike
  ): Result;
}

export namespace CardLevelUpEvent {
  export type InputTuple = [
    _id: BigNumberish,
    _level: BigNumberish,
    _attackPower: BigNumberish
  ];
  export type OutputTuple = [_id: bigint, _level: bigint, _attackPower: bigint];
  export interface OutputObject {
    _id: bigint;
    _level: bigint;
    _attackPower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CardTransferedEvent {
  export type InputTuple = [_from: AddressLike, _to: AddressLike];
  export type OutputTuple = [_from: string, _to: string];
  export interface OutputObject {
    _from: string;
    _to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewCardCreatedEvent {
  export type InputTuple = [_id: BigNumberish, name: string];
  export type OutputTuple = [_id: bigint, name: string];
  export interface OutputObject {
    _id: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PokemonCardManager extends BaseContract {
  connect(runner?: ContractRunner | null): PokemonCardManager;
  waitForDeployment(): Promise<this>;

  interface: PokemonCardManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cardCount: TypedContractMethod<[], [bigint], "view">;

  createPokemonCard: TypedContractMethod<
    [
      _name: string,
      _pokemonType: BigNumberish,
      _rarity: BigNumberish,
      _cardOwner: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getMyCards: TypedContractMethod<[], [bigint[]], "view">;

  getPokemonCardById: TypedContractMethod<
    [_cardId: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, string] & {
        id: bigint;
        name: string;
        pokemonType: bigint;
        rarity: bigint;
        level: bigint;
        attackPower: bigint;
        cardOwner: string;
      }
    ],
    "view"
  >;

  levelUp: TypedContractMethod<[_cardId: BigNumberish], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  transferCardOwnership: TypedContractMethod<
    [_cardId: BigNumberish, _newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cardCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createPokemonCard"
  ): TypedContractMethod<
    [
      _name: string,
      _pokemonType: BigNumberish,
      _rarity: BigNumberish,
      _cardOwner: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMyCards"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPokemonCardById"
  ): TypedContractMethod<
    [_cardId: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, string] & {
        id: bigint;
        name: string;
        pokemonType: bigint;
        rarity: bigint;
        level: bigint;
        attackPower: bigint;
        cardOwner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "levelUp"
  ): TypedContractMethod<[_cardId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferCardOwnership"
  ): TypedContractMethod<
    [_cardId: BigNumberish, _newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CardLevelUp"
  ): TypedContractEvent<
    CardLevelUpEvent.InputTuple,
    CardLevelUpEvent.OutputTuple,
    CardLevelUpEvent.OutputObject
  >;
  getEvent(
    key: "CardTransfered"
  ): TypedContractEvent<
    CardTransferedEvent.InputTuple,
    CardTransferedEvent.OutputTuple,
    CardTransferedEvent.OutputObject
  >;
  getEvent(
    key: "NewCardCreated"
  ): TypedContractEvent<
    NewCardCreatedEvent.InputTuple,
    NewCardCreatedEvent.OutputTuple,
    NewCardCreatedEvent.OutputObject
  >;

  filters: {
    "CardLevelUp(uint256,uint256,uint256)": TypedContractEvent<
      CardLevelUpEvent.InputTuple,
      CardLevelUpEvent.OutputTuple,
      CardLevelUpEvent.OutputObject
    >;
    CardLevelUp: TypedContractEvent<
      CardLevelUpEvent.InputTuple,
      CardLevelUpEvent.OutputTuple,
      CardLevelUpEvent.OutputObject
    >;

    "CardTransfered(address,address)": TypedContractEvent<
      CardTransferedEvent.InputTuple,
      CardTransferedEvent.OutputTuple,
      CardTransferedEvent.OutputObject
    >;
    CardTransfered: TypedContractEvent<
      CardTransferedEvent.InputTuple,
      CardTransferedEvent.OutputTuple,
      CardTransferedEvent.OutputObject
    >;

    "NewCardCreated(uint256,string)": TypedContractEvent<
      NewCardCreatedEvent.InputTuple,
      NewCardCreatedEvent.OutputTuple,
      NewCardCreatedEvent.OutputObject
    >;
    NewCardCreated: TypedContractEvent<
      NewCardCreatedEvent.InputTuple,
      NewCardCreatedEvent.OutputTuple,
      NewCardCreatedEvent.OutputObject
    >;
  };
}
